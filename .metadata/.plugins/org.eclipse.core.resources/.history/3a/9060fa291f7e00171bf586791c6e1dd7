/*
 * Iterator.h
 *
 *  Created on: Aug 10, 2017
 *      Author: root
 */

#ifndef ITERATOR_H_
#define ITERATOR_H_
#include<iostream>
template <class TNode>
class Iterator{
private:
	TNode* ptr;
public:
	Iterator(){
		ptr = NULL;
	}
	Iterator(const Iterator<TNode>& obj){
		this->ptr = obj.ptr;
	}
	~Iterator(){
		delete ptr;
		ptr = NULL;
	}
	Iterator<TNode>& operator=(const Iterator<TNode>& obj){
		this->ptr = obj.ptr;
		return *this;
	}
	Iterator<TNode>& operator++(){
		ptr=ptr->next;
		return *this;
	}
	Iterator<TNode>& operator+(int i){
		while(i>0){
			ptr=ptr->next;
			i--;
		}
		return *this;
	}
	bool operator==(const Iterator<TNode>& obj){
		return this->ptr==obj.ptr;
	}
	bool operator!=(const Iterator<TNode>& obj){
		return this->ptr!=obj.ptr;
	}
};




#endif /* ITERATOR_H_ */
